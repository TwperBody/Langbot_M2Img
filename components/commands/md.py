# Auto generated by LangBot Plugin SDK.
# Please refer to https://docs.langbot.app/en/plugin/dev/tutor.html for more details.
from __future__ import annotations

from typing import Any, AsyncGenerator

from langbot_plugin.api.definition.components.command.command import Command, Subcommand
from langbot_plugin.api.entities.builtin.command.context import ExecuteContext, CommandReturn
from langbot_plugin.api.entities.builtin.platform import message as platform_message

from ...config import DEFAULT_CONFIG, PLUGIN_CONFIG, IMG_CONFIG, MARKDOWN_CONFIG
from ...utils.markdown_converter import MarkdownConverter


class MarkdownCommand(Command):
    """Markdown转图片命令"""
    
    def __init__(self):
        super().__init__()
        self.converter = MarkdownConverter()
        
        @self.subcommand(
            name="",  # 根命令
            help="Convert Markdown text to image",
            usage="md <markdown_text>",
            aliases=["markdown", "m2i"],
        )
        async def convert(self, context: ExecuteContext) -> AsyncGenerator[CommandReturn, None]:
            """转换Markdown文本为图片"""
            if not context.crt_params:
                yield CommandReturn(
                    text="请提供要转换的Markdown文本\n使用方法: !md <markdown文本>"
                )
                return
            
            markdown_text = ' '.join(context.crt_params)
            
            # 检查文本长度
            max_length = PLUGIN_CONFIG.get('max_text_length', 10000)
            if len(markdown_text) > max_length:
                yield CommandReturn(
                    text=f"文本太长，最大支持 {max_length} 字符"
                )
                return
            
            try:
                img_base64 = await self.converter.convert_to_image(markdown_text)
                if img_base64:
                    yield CommandReturn(
                        images=[platform_message.Image(base64=img_base64)]
                    )
                else:
                    yield CommandReturn(
                        text="转换失败，请检查Markdown语法"
                    )
            except Exception as e:
                yield CommandReturn(
                    text=f"转换出错: {str(e)}"
                )

        @self.subcommand(
            name="config",
            help="Show current plugin configuration",
            usage="md config",
            aliases=["cfg"],
        )
        async def config(self, context: ExecuteContext) -> AsyncGenerator[CommandReturn, None]:
            """显示插件配置"""
            config_info = f"""
Markdown转图片插件配置：

图片设置：
• 宽度: {IMG_CONFIG['width']}px
• 格式: {IMG_CONFIG['format'].upper()}
• 缩放: {IMG_CONFIG['zoom_factor']}x
• JPG质量: {IMG_CONFIG['jpg_quality']}%

功能开关：
• 数学公式: {'✓' if 'mdx_math' in MARKDOWN_CONFIG['extensions'] else '✗'}
• 代码高亮: {'✓' if 'codehilite' in MARKDOWN_CONFIG['extensions'] else '✗'}
• 表格支持: {'✓' if 'tables' in MARKDOWN_CONFIG['extensions'] else '✗'}
• 脚注支持: {'✓' if 'footnotes' in MARKDOWN_CONFIG['extensions'] else '✗'}

行为设置：
• 自动转换: {'✓' if PLUGIN_CONFIG['auto_convert'] else '✗'}
• 最小长度: {PLUGIN_CONFIG['min_text_length']}字符
• 最大长度: {PLUGIN_CONFIG['max_text_length']}字符
• 缓存开启: {'✓' if PLUGIN_CONFIG['cache_enabled'] else '✗'}
• 日志级别: {PLUGIN_CONFIG['log_level']}
            """
            yield CommandReturn(
                text=config_info.strip()
            )

        @self.subcommand(
            name="help",
            help="Show help information",
            usage="md help",
            aliases=["h"],
        )
        async def help_command(self, context: ExecuteContext) -> AsyncGenerator[CommandReturn, None]:
            """显示帮助信息"""
            help_text = """
Markdown转图片插件使用帮助：

命令格式：
• !md <markdown文本> - 将Markdown文本转换为图片
• !md config - 查看当前插件配置
• !md help - 显示此帮助信息

支持的Markdown语法：
• 标题: # ## ### 等
• 粗体: **文本** 或 __文本__
• 斜体: *文本* 或 _文本_
• 代码: `代码` 或 ```代码块```
• 链接: [文本](URL)
• 图片: ![alt](URL)
• 列表: - 或 1. 
• 表格: | 列1 | 列2 |
• 数学公式: $公式$ 或 $$公式$$

示例：
!md # 标题\\n这是**粗体**和*斜体*文本。
            """
            yield CommandReturn(
                text=help_text.strip()
            ) 