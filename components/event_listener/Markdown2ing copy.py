# Auto generated by LangBot Plugin SDK.
# Please refer to https://docs.langbot.app/en/plugin/dev/tutor.html for more details.
from __future__ import annotations

from langbot_plugin.api.entities.builtin.platform import message as platform_message
from langbot_plugin.api.definition.components.common.event_listener import EventListener
from langbot_plugin.api.entities import events, context

import re
import base64
import markdown
from html2image import Html2Image
import os
from PIL import Image
import tempfile
from io import BytesIO
import math

response_text = None #全局变量

test_config_a = 2

test_config_b = True

test_config_c = False

test_config_d = 800

try:
    import pymdownx.emoji
    import pymdownx.superfences
    import pymdownx.highlight
    import pymdownx.inlinehilite
    import pymdownx.snippets
    import pymdownx.tabbed
    import pymdownx.tasklist
    import pymdownx.tilde
    import pymdownx.caret
    import pymdownx.mark
    import pymdownx.smartsymbols
    import pymdownx.arithmatex
    import pymdownx.betterem
    import pymdownx.critic
    import pymdownx.details
    import pymdownx.escapeall
    import pymdownx.extra
    import pymdownx.keys
    import pymdownx.progressbar
    import pymdownx.saneheaders
    PYMDEXT_AVAILABLE = True
except ImportError:
    PYMDEXT_AVAILABLE = False
    print("警告: pymdown-extensions 未安装，将使用标准 Markdown 扩展")

class MarkdownToBase64Converter:
    def __init__(self):
        self.hti = Html2Image()
        # 设置浏览器标志以获得更好的渲染效果
        self.hti.browser_flags = ['--hide-scrollbars', '--disable-gpu']
    
    def convert(self, markdown_text: str) -> str:
        """将 Markdown 文本转换为 Base64 图片，支持完整语法和高度自适应"""
        try:
            # 使用临时目录避免文件冲突
            with tempfile.TemporaryDirectory() as temp_dir:
                self.hti.output_path = temp_dir
                
                # 配置扩展
                extensions, extension_configs = self._get_extensions_and_config()
                
                # 转换 Markdown 到 HTML
                html_content = markdown.markdown(
                    markdown_text, 
                    extensions=extensions,
                    extension_configs=extension_configs
                )
                
                # 动态计算所需高度
                estimated_height = self.estimate_height(markdown_text)
                
                # 完整的 CSS 样式
                styled_html = self._create_styled_html(html_content)
                
                # 使用动态计算的高度进行截图
                filename = "temp.png"
                self.hti.screenshot(
                    html_str=styled_html, 
                    save_as=filename,
                    size=(800, estimated_height)
                )
                
                # 获取文件路径
                temp_path = os.path.join(temp_dir, filename)
                if not os.path.exists(temp_path):
                    temp_path = filename
                
                # 读取图片并转换为纯 Base64
                with open(temp_path, 'rb') as f:
                    image_data = f.read()
                
                # 转换为纯 Base64
                pure_base64 = base64.b64encode(image_data).decode('utf-8')
                
                return pure_base64
                
        except Exception as e:
            print(f"转换错误: {e}")
            import traceback
            traceback.print_exc()
            return ""
    
    def _get_extensions_and_config(self):
        """获取扩展和配置"""
        if PYMDEXT_AVAILABLE:
            # 使用 pymdown-extensions 的完整配置
            extensions = [
                'pymdownx.extra',
                'pymdownx.superfences',
                'pymdownx.highlight',
                'pymdownx.inlinehilite',
                'pymdownx.tabbed',
                'pymdownx.tasklist',
                'pymdownx.tilde',
                'pymdownx.caret',
                'pymdownx.mark',
                'pymdownx.smartsymbols',
                'pymdownx.betterem',
                'pymdownx.details',
                'pymdownx.emoji',
                'pymdownx.keys',
                'pymdownx.progressbar',
                'pymdownx.saneheaders',
                #'toc',
                'tables',
                'nl2br',
                'sane_lists',
                'attr_list',
                'md_in_html'
            ]
            
            extension_configs = {
                'pymdownx.highlight': {
                    'use_pygments': True,
                    'css_class': 'highlight',
                    'linenums': False
                },
                'pymdownx.superfences': {
                    'custom_fences': [
                        {
                            'name': 'mermaid',
                            'class': 'mermaid',
                            'format': pymdownx.superfences.fence_div_format
                        }
                    ]
                },
                'pymdownx.emoji': {
                    'emoji_index': pymdownx.emoji.twemoji,
                    'emoji_generator': pymdownx.emoji.to_svg
                },
                'pymdownx.tasklist': {
                    'custom_checkbox': True
                },
                'toc': {
                    'permalink': True
                }
            }
        else:
            # 备用配置
            extensions = [
                'extra', 'sane_lists', 'nl2br', 
                'fenced_code', 'tables', 'attr_list', 'md_in_html'
            ]
            extension_configs = {}
            
        return extensions, extension_configs
    
    def _create_styled_html(self, html_content: str) -> str:
        """创建带完整样式的 HTML"""
        return f"""
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="UTF-8">
            <style>
                body {{
                    font-family: "WenQuanYi Micro Hei", "Microsoft YaHei", "PingFang SC", "Helvetica Neue", Arial, sans-serif;
                    line-height: 1.6;
                    color: #333;
                    padding: 20px;
                    background: white;
                    max-width: 800px;
                    margin: 0 auto;
                    word-wrap: break-word;
                }}
                h1, h2, h3, h4, h5, h6 {{
                    color: #2c3e50;
                    margin: 1.2em 0 0.6em 0;
                    line-height: 1.3;
                }}
                h1 {{ 
                    font-size: 1.8em; 
                    border-bottom: 2px solid #3498db; 
                    padding-bottom: 0.3em; 
                }}
                h2 {{ 
                    font-size: 1.5em; 
                    border-bottom: 1px solid #bdc3c7; 
                    padding-bottom: 0.2em; 
                }}
                h3 {{ font-size: 1.3em; }}
                h4 {{ font-size: 1.2em; }}
                h5 {{ font-size: 1.1em; }}
                h6 {{ font-size: 1em; color: #7f8c8d; }}
                
                p {{ margin: 0.8em 0; }}
                
                a {{ color: #3498db; text-decoration: none; }}
                a:hover {{ text-decoration: underline; }}
                
                strong, b {{ font-weight: bold; color: #2c3e50; }}
                em, i {{ font-style: italic; }}
                
                /* pymdownx 扩展样式 */
                .highlight {{
                    background: #f8f9fa;
                    padding: 15px;
                    border-radius: 5px;
                    overflow: auto;
                    line-height: 1.4;
                    border: 1px solid #e9ecef;
                    margin: 1em 0;
                }}
                
                code {{
                    background: #f8f9fa;
                    padding: 2px 6px;
                    border-radius: 3px;
                    font-family: "Monaco", "Menlo", "Ubuntu Mono", monospace;
                    font-size: 0.9em;
                    border: 1px solid #e9ecef;
                }}
                
                pre {{
                    background: #f8f9fa;
                    padding: 15px;
                    border-radius: 5px;
                    overflow: auto;
                    line-height: 1.4;
                    border: 1px solid #e9ecef;
                    margin: 1em 0;
                }}
                
                pre code {{
                    background: none;
                    padding: 0;
                    border: none;
                }}
                
                blockquote {{
                    border-left: 4px solid #3498db;
                    padding-left: 15px;
                    margin: 1em 0;
                    color: #7f8c8d;
                    background: #f8f9fa;
                    padding: 10px 15px;
                    border-radius: 0 5px 5px 0;
                }}
                
                ul, ol {{
                    padding-left: 2em;
                    margin: 1em 0;
                }}
                
                li {{
                    margin: 0.3em 0;
                }}
                
                /* 任务列表样式 - 增强版本 */
                .task-list-item {{
                    list-style-type: none;
                    margin-left: -1.5em;
                }}
                .task-list-item input[type="checkbox"] {{
                    margin-right: 0.5em;
                    transform: scale(1.2);
                }}
                .task-list-item input[type="checkbox"]:checked + * {{
                    text-decoration: line-through;
                    color: #95a5a6;
                }}
                
                /* 表格样式 */
                table {{
                    border-collapse: collapse;
                    width: 100%;
                    margin: 1em 0;
                }}
                
                th, td {{
                    border: 1px solid #ddd;
                    padding: 8px 12px;
                    text-align: left;
                }}
                
                th {{
                    background-color: #3498db;
                    color: white;
                    font-weight: bold;
                }}
                
                tr:nth-child(even) {{
                    background-color: #f8f9fa;
                }}
                
                /* 水平线样式 */
                hr {{
                    border: none;
                    height: 2px;
                    background: linear-gradient(90deg, transparent, #3498db, transparent);
                    margin: 2em 0;
                }}
                
                /* 图片样式 */
                img {{
                    max-width: 100%;
                    height: auto;
                    display: block;
                    margin: 1em auto;
                }}
                
                /* 代码高亮样式 */
                .highlight .hll {{ background-color: #ffffcc }}
                .highlight {{ background: #f8f9fa; }}
                .highlight .c {{ color: #999988; font-style: italic }} /* Comment */
                .highlight .err {{ color: #a61717; background-color: #e3d2d2 }} /* Error */
                .highlight .k {{ color: #000000; font-weight: bold }} /* Keyword */
                .highlight .o {{ color: #000000; font-weight: bold }} /* Operator */
                .highlight .cm {{ color: #999988; font-style: italic }} /* Comment.Multiline */
                .highlight .cp {{ color: #999999; font-weight: bold; font-style: italic }} /* Comment.Preproc */
                .highlight .c1 {{ color: #999988; font-style: italic }} /* Comment.Single */
                .highlight .cs {{ color: #999999; font-weight: bold; font-style: italic }} /* Comment.Special */
                .highlight .gd {{ color: #000000; background-color: #ffdddd }} /* Generic.Deleted */
                .highlight .ge {{ color: #000000; font-style: italic }} /* Generic.Emph */
                .highlight .gr {{ color: #aa0000 }} /* Generic.Error */
                .highlight .gh {{ color: #999999 }} /* Generic.Heading */
                .highlight .gi {{ color: #000000; background-color: #ddffdd }} /* Generic.Inserted */
                .highlight .go {{ color: #888888 }} /* Generic.Output */
                .highlight .gp {{ color: #555555 }} /* Generic.Prompt */
                .highlight .gs {{ font-weight: bold }} /* Generic.Strong */
                .highlight .gu {{ color: #aaaaaa }} /* Generic.Subheading */
                .highlight .gt {{ color: #aa0000 }} /* Generic.Traceback */
                .highlight .kc {{ color: #000000; font-weight: bold }} /* Keyword.Constant */
                .highlight .kd {{ color: #000000; font-weight: bold }} /* Keyword.Declaration */
                .highlight .kn {{ color: #000000; font-weight: bold }} /* Keyword.Namespace */
                .highlight .kp {{ color: #000000; font-weight: bold }} /* Keyword.Pseudo */
                .highlight .kr {{ color: #000000; font-weight: bold }} /* Keyword.Reserved */
                .highlight .kt {{ color: #445588; font-weight: bold }} /* Keyword.Type */
                .highlight .m {{ color: #009999 }} /* Literal.Number */
                .highlight .s {{ color: #d01040 }} /* Literal.String */
                .highlight .na {{ color: #008080 }} /* Name.Attribute */
                .highlight .nb {{ color: #0086B3 }} /* Name.Builtin */
                .highlight .nc {{ color: #445588; font-weight: bold }} /* Name.Class */
                .highlight .no {{ color: #008080 }} /* Name.Constant */
                .highlight .nd {{ color: #3c5d5d; font-weight: bold }} /* Name.Decorator */
                .highlight .ni {{ color: #800080 }} /* Name.Entity */
                .highlight .ne {{ color: #990000; font-weight: bold }} /* Name.Exception */
                .highlight .nf {{ color: #990000; font-weight: bold }} /* Name.Function */
                .highlight .nl {{ color: #990000; font-weight: bold }} /* Name.Label */
                .highlight .nn {{ color: #555555 }} /* Name.Namespace */
                .highlight .nt {{ color: #000080 }} /* Name.Tag */
                .highlight .nv {{ color: #008080 }} /* Name.Variable */
                .highlight .ow {{ color: #000000; font-weight: bold }} /* Operator.Word */
                .highlight .w {{ color: #bbbbbb }} /* Text.Whitespace */
                .highlight .mf {{ color: #009999 }} /* Literal.Number.Float */
                .highlight .mh {{ color: #009999 }} /* Literal.Number.Hex */
                .highlight .mi {{ color: #009999 }} /* Literal.Number.Integer */
                .highlight .mo {{ color: #009999 }} /* Literal.Number.Oct */
                .highlight .sb {{ color: #d01040 }} /* Literal.String.Backtick */
                .highlight .sc {{ color: #d01040 }} /* Literal.String.Char */
                .highlight .sd {{ color: #d01040 }} /* Literal.String.Doc */
                .highlight .s2 {{ color: #d01040 }} /* Literal.String.Double */
                .highlight .se {{ color: #d01040 }} /* Literal.String.Escape */
                .highlight .sh {{ color: #d01040 }} /* Literal.String.Heredoc */
                .highlight .si {{ color: #d01040 }} /* Literal.String.Interpol */
                .highlight .sx {{ color: #d01040 }} /* Literal.String.Other */
                .highlight .sr {{ color: #009926 }} /* Literal.String.Regex */
                .highlight .s1 {{ color: #d01040 }} /* Literal.String.Single */
                .highlight .ss {{ color: #990073 }} /* Literal.String.Symbol */
                .highlight .bp {{ color: #999999 }} /* Name.Builtin.Pseudo */
                .highlight .vc {{ color: #008080 }} /* Name.Variable.Class */
                .highlight .vg {{ color: #008080 }} /* Name.Variable.Global */
                .highlight .vi {{ color: #008080 }} /* Name.Variable.Instance */
                .highlight .il {{ color: #009999 }} /* Literal.Number.Integer.Long */
                
                /* pymdownx 特殊元素样式 */
                .tabbed-set {{ margin: 1em 0; }}
                .tabbed-content {{ padding: 1em; border: 1px solid #e9ecef; border-top: none; }}
                .tabbed-labels {{ background: #f8f9fa; padding: 0.5em; }}
                .tabbed-labels label {{ display: inline-block; padding: 0.5em 1em; cursor: pointer; }}
                .tabbed-labels label:hover {{ background: #e9ecef; }}
                
                .details {{ margin: 1em 0; border: 1px solid #e9ecef; border-radius: 5px; }}
                .details summary {{ padding: 1em; background: #f8f9fa; cursor: pointer; }}
                .details .details-content {{ padding: 1em; }}
                
                .keys {{ background: #f8f9fa; padding: 2px 6px; border-radius: 3px; border: 1px solid #e9ecef; }}
                
                .progress {{ background: #e9ecef; border-radius: 3px; height: 20px; margin: 0.5em 0; }}
                .progress-bar {{ background: #3498db; height: 100%; border-radius: 3px; }}
                
                mark {{ background: #fff3cd; padding: 2px 4px; }}
                
                .emoji {{ width: 1em; height: 1em; vertical-align: -0.1em; }}
            </style>
        </head>
        <body>
            {html_content}
        </body>
        </html>
        """
    
    def estimate_height(self, markdown_text: str) -> int:
        """根据内容估算所需高度"""
        # 基础高度
        base_height = 200
        
        # 计算行数
        lines = markdown_text.split('\n')
        line_count = len(lines)
        
        # 计算代码块行数
        code_block_lines = 0
        in_code_block = False
        for line in lines:
            if line.strip().startswith('```'):
                in_code_block = not in_code_block
                code_block_lines += 1
            elif in_code_block:
                code_block_lines += 1
        
        # 计算普通文本行数
        normal_lines = line_count - code_block_lines
        
        # 估算高度
        # 普通文本：每行约25px
        # 代码块：每行约20px（更紧凑）
        # 标题、列表等：额外增加高度
        estimated_height = base_height + (normal_lines * 25) + (code_block_lines * 20)
        
        # 根据特殊元素增加高度
        if '|' in markdown_text:  # 表格
            estimated_height += 200
        
        if '- [' in markdown_text:  # 任务列表
            estimated_height += 100
        
        if '> ' in markdown_text:  # 引用块
            estimated_height += 80
        
        # 确保最小和最大高度
        min_height = 400
        max_height = 5000
        
        estimated_height = max(min_height, min(estimated_height, max_height))
        
        print(f"估算高度: {estimated_height}px (行数: {line_count}, 代码行: {code_block_lines})")
        
        return estimated_height

class DefaultEventListener(EventListener):

    async def initialize(self):
        await super().initialize()
        
        @self.handler(events.NormalMessageResponded)
        async def handler(event_context):
            global response_text 
            global test_config_a
            markdown_number = test_config_a
            response_text = event_context.event.response_text
            print(response_text)
            print('\n')
            print("-" * 50)
            
            # 逐行分析Markdown格式
            lines = response_text.split('\n')
            for i, line in enumerate(lines, 1):
                is_markdown, features = self.analyze_line_markdown(line.strip())
                status = "✓ Markdown" if is_markdown else "✗ 普通文本"
                if is_markdown:
                    markdown_number -=1
                
                features_str = f" [{', '.join(features)}]" if features else ""
                print(f"第{i}行: {status}{features_str} -> {repr(line)}")

            if markdown_number <= 0:
                converter = MarkdownToBase64Converter()
                base64_image = "data:image/png;base64," + converter.convert(response_text)
                # base64_image = converter.convert(response_text)

                if base64_image:
                    print(f"✅ 转换成功！Base64 长度: {len(base64_image)}")
                    print(base64_image)
                    platform_message.MessageChain([
                        platform_message.Image(url=base64_image)
                    ])
                    print("图片发送成功")
                pass

    
    def analyze_line_markdown(self, line: str) -> tuple[bool, list[str]]:
        """分析单行是否为Markdown格式"""
        features = []
        
        # 检查标题 (#, ##, ###)
        if re.search(r'^#{1,6}\s+.+', line):
            features.append("标题")
            
        # 检查粗体 (** 或 __)
        if re.search(r'\*\*.+?\*\*', line) or re.search(r'__.+?__', line):
            features.append("粗体")
            
        # 检查斜体 (* 或 _)
        if re.search(r'\*[^*\n].*?\*', line) or re.search(r'_[^_\n].*?_', line):
            features.append("斜体")
            
        # 检查行内代码 (`)
        if re.search(r'`[^`\n]+?`', line):
            features.append("行内代码")
            
        # 检查列表 (-, *, + 或 数字.)
        if re.search(r'^[\s]*[-*+]\s+.+', line) or re.search(r'^[\s]*\d+\.\s+.+', line):
            features.append("列表")
            
        # 检查引用 (>)
        if re.search(r'^>+\s+.+', line):
            features.append("引用块")
            
        # 检查链接 ([文字](链接))
        if re.search(r'\[.*?\]\(.*?\)', line):
            features.append("链接")
           
        # 检查图片 (![alt](src))
        if re.search(r'!\[.*?\]\(.*?\)', line):
            features.append("图片")
            
        # 检查分割线 (---, ***)
        if re.search(r'^---+\s*$', line) or re.search(r'^\*\*\*+\s*$', line):
            features.append("分割线")

        # 检查代码块开始或结束
        if line.strip() == '```' or line.startswith('```'):
            features.append("代码块标记")

        # 如果有任意Markdown特性，就认为是Markdown格式
        is_markdown = len(features) > 0
        
        return is_markdown, features
