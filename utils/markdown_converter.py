# Auto generated by LangBot Plugin SDK.
from __future__ import annotations

import os
import base64
import tempfile
import io
from typing import Optional

# Markdown相关导入
from markdown import markdown

# 尝试导入HTML转图片库（优先级：pydf > imgkit）
HTML_TO_IMAGE_ENGINE = None
try:
    import pydf
    HTML_TO_IMAGE_ENGINE = 'pydf'
    print("✅ 使用 pydf (内置wkhtmltopdf) 引擎")
except ImportError:
    try:
        import imgkit
        HTML_TO_IMAGE_ENGINE = 'imgkit'
        print("✅ 使用 imgkit (系统wkhtmltopdf) 引擎")
    except ImportError:
        print("❌ 未找到HTML转图片引擎")

from ..config import DEFAULT_CONFIG, IMG_CONFIG, MARKDOWN_CONFIG, HTML_TEMPLATE, PLUGIN_CONFIG


class MarkdownConverter:
    """Markdown转图片转换器"""
    
    def __init__(self):
        self._check_dependencies()
    
    def _check_dependencies(self) -> bool:
        """检查系统依赖"""
        if HTML_TO_IMAGE_ENGINE is None:
            print("❌ 错误: 未找到HTML转图片引擎")
            print("请安装以下任一依赖:")
            print("1. pydf (推荐): pip install pydf")
            print("2. imgkit: pip install imgkit + 安装wkhtmltopdf")
            return False
        
        print(f"✅ HTML转图片引擎: {HTML_TO_IMAGE_ENGINE}")
        return True
    
    async def convert_to_image(self, markdown_text: str) -> Optional[str]:
        """
        将Markdown文本转换为Base64编码的图片
        
        Args:
            markdown_text: Markdown文本
            
        Returns:
            Base64编码的图片字符串，失败返回None
        """
        if HTML_TO_IMAGE_ENGINE is None:
            print("❌ 无可用的HTML转图片引擎")
            return None
        
        try:
            # 获取图片设置
            img_settings = IMG_CONFIG.copy()
            
            # 将Markdown转换为HTML
            html_content = (
                HTML_TEMPLATE['front'] 
                + markdown(
                    text=markdown_text, 
                    extensions=MARKDOWN_CONFIG['extensions'], 
                    extension_configs=MARKDOWN_CONFIG['extension_configs']
                )
                + HTML_TEMPLATE['end']
            )
            
            # 创建临时文件
            with tempfile.NamedTemporaryFile(
                suffix=f'.{img_settings["format"]}', 
                delete=False
            ) as temp_file:
                temp_path = temp_file.name
            
            try:
                # 根据可用引擎选择转换方法
                if HTML_TO_IMAGE_ENGINE == 'pydf':
                    # 使用pydf渲染HTML为PDF，然后转为图片
                    success = self._convert_with_pydf(html_content, temp_path, img_settings)
                elif HTML_TO_IMAGE_ENGINE == 'imgkit':
                    # 使用imgkit渲染HTML为图片
                    success = self._convert_with_imgkit(html_content, temp_path, img_settings)
                else:
                    print("❌ 无可用的HTML转图片引擎")
                    return None
                
                if not success:
                    return None
                
                # 读取图片并转换为base64
                with open(temp_path, 'rb') as img_file:
                    img_base64 = base64.b64encode(img_file.read()).decode()
                
                print(f"Markdown转图片成功，格式: {img_settings['format']}")
                return img_base64
                
            finally:
                # 清理临时文件
                if PLUGIN_CONFIG['temp_file_cleanup'] and os.path.exists(temp_path):
                    os.remove(temp_path)
            
        except Exception as e:
            print(f"Markdown转图片失败: {e}")
            return None

    def _convert_with_pydf(self, html_content: str, temp_path: str, img_settings: dict) -> bool:
        """使用pydf引擎转换HTML为图片"""
        try:
            import pydf
            
            # pydf配置
            pdf_options = {
                'page_size': 'A4',
                'margin_top': '0.75in',
                'margin_right': '0.75in', 
                'margin_bottom': '0.75in',
                'margin_left': '0.75in',
                'disable_smart_shrinking': True,
                'zoom': img_settings['zoom_factor'],
                'encoding': 'UTF-8',
            }
            
            # 生成PDF
            pdf_data = pydf.generate_pdf(html_content, **pdf_options)
            
            # 如果需要图片格式，需要进一步转换
            if img_settings['format'] in ['png', 'jpg']:
                try:
                    from PIL import Image
                    import fitz  # PyMuPDF
                    
                    # 将PDF转换为图片
                    pdf_doc = fitz.open(stream=pdf_data, filetype="pdf")
                    page = pdf_doc[0]
                    
                    # 渲染为图片
                    mat = fitz.Matrix(img_settings['zoom_factor'], img_settings['zoom_factor'])
                    pix = page.get_pixmap(matrix=mat)
                    img_data = pix.tobytes("png")
                    
                    if img_settings['format'] == 'png':
                        with open(temp_path, 'wb') as f:
                            f.write(img_data)
                    else:  # jpg
                        # 转换为JPG
                        img = Image.open(io.BytesIO(img_data))
                        img = img.convert('RGB')
                        img.save(temp_path, 'JPEG', quality=img_settings['jpg_quality'])
                    
                    pdf_doc.close()
                    return True
                    
                except ImportError:
                    print("❌ 需要安装 PyMuPDF 和 Pillow: pip install PyMuPDF Pillow")
                    return False
            else:
                # 直接保存PDF
                with open(temp_path, 'wb') as f:
                    f.write(pdf_data)
                return True
                
        except Exception as e:
            print(f"pydf转换失败: {e}")
            return False

    def _convert_with_imgkit(self, html_content: str, temp_path: str, img_settings: dict) -> bool:
        """使用imgkit引擎转换HTML为图片"""
        try:
            import imgkit
            
            # imgkit配置
            options = {
                'format': img_settings['format'],
                'width': img_settings['width'],
                'quality': img_settings['jpg_quality'] if img_settings['format'] == 'jpg' else None,
                'zoom': img_settings['zoom_factor'],
                'encoding': 'UTF-8',
            }
            
            # 过滤None值
            options = {k: v for k, v in options.items() if v is not None}
            
            # 生成图片
            imgkit.from_string(html_content, temp_path, options=options)
            return True
            
        except Exception as e:
            print(f"imgkit转换失败: {e}")
            return False 